Codificou classes:
	Classes como MainActivity, TempActivity, UmidActivity, Co2Activity, GlpActivity. Cada uma dessas classes representa uma atividade dentro do aplicativo Android.

Codificou atributos:
	Atributos nas classes, como temp, umid, co2, glp, e hist. Esses atributos são do tipo ImageButton e são usados para referenciar botões de imagem na interface do usuário.

Codificou métodos:
	Métodos em várias classes, como onCreate, setOnClickListener, e outros métodos relacionados à interação do usuário. Esses métodos são usados para definir o comportamento da atividade quando eventos ocorrem, como cliques nos botões.

Codificou  atributos protegidos e/ou privados:
	Os atributos private ImageButton temp,private ImageButton umid etc. são usado para garantir que eles não possam ser acessados diretamente de fora da classe.
	Isso ajuda a manter o código seguro e facilita a manutenção futura, pois você controla o acesso a esses atributos por meio de métodos públicos.

Codificou métodos protegidos e/ou privados:
	Os métodos onClick em cada botão são métodos privados que lidam com ações de clique. Eles são privados porque não precisam ser acessados fora da classe MainActivity.
	
instanciou objetos:
	Instâncias de  objetos das classes TempActivity, UmidActivity, Co2Activity, GlpActivity, quando os respectivos botões são clicados.

Identificou e codificou classes de comportamento:
	As classes  como TempActivity, UmidActivity, Co2Activity, GlpActivity, e outras, representam classes de comportamento, pois definem o comportamento das atividades do aplicativo.

Ocultou informações usando atributos e/ou métodos protected/private:
	atributos privados e métodos privados para encapsular o comportamento interno das classes, como os métodos onClick e os atributos temp, umid, etc.

Código Limpo:
	Nomes Descritivos: como temp, umid, co2, glp, e hist, o que facilita a compreensão de sua finalidade.
	Funções/Métodos Pequenos: métodos de clique (onClick) para os botões, que mantêm cada ação específica em métodos separados, seguindo o princípio da responsabilidade única.
	Sem Duplicação de Código
	Indentação e Espaçamento Consistentes

P2

Codificou atributos estáticos
	O atributo estático SPLASH_TIME_OUT, da classe SplashActivity, esse atributo serve pra contar o tempo que a primeira tela com a logo e o nome do app fica aparecendo antes 
	de mudar de pagina altomaticamente									

Codificou métodos construtores
	A classe não tem um metodo contrutor de cara mas ela tem construtor herdado da classe AppCompatActivity, que até que é normal em java construtor assim pelo menos foi oque 
	a gente descobriu

Instalou e usou bibliotecas de terceiros
	A biblioteca mpandroidchart serve pra fazer graficos que que se movem por banco de dados no Android

Codificou enums
	enumeração chamada EstadoTemperatura, representa um valor de temperatura proximo do ambiente atual

Codificou propriedades
	A TextView representa um texto que é mostrado no layout do aplicativo para o usuario


Codificou classes imutáveis
	A classe EstadoTemperatura é uma classe imutavel, basicamente isso garante uma maior estabilidade e evita que o mude de estado inadivertidamente, deixando assim mais seguro, 
	e deixando testes mais faceis de serem executados

Usou conceitos de SOLID
	SRP: o metodo atualizarGrafico, atualizarTextView realiza tarefas expecificas mesmo que estão modificando coisas na mesma pagina

	OCP:O codigo é muito grande para ficar adicionando novos metodos e funcionalidadessem a necessidade de modificar as classes existentes. 
	Isso pode ser observado, por exemplo, ao adicionar novos métodos ou lógica específica sem alterar os métodos existentes.

UML

	O diagrama em UML offerece uma visão doque ta rolando no codigo sem necessariamente mostrar ele e é exelente para explicar a logica do codigo com uma só imagem
